// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TopViewer.RenderingControls = (function(superClass) {
    extend(RenderingControls, superClass);

    function RenderingControls(options) {
      this.options = options;
      RenderingControls.__super__.constructor.apply(this, arguments);
      this.$appWindow = this.options.engine.$appWindow;
      this.scene = this.options.engine.scene;
      this.$controls = $("<div class='rendering-controls'>");
      this.$appWindow.append(this.$controls);
      this.rootControl = new TopViewer.UIControl(this, this.$controls);
      new TopViewer.SliderControl(this, {
        $parent: this.$controls,
        "class": 'displacement-factor',
        minimumValue: 1,
        maximumValue: 100,
        value: 1,
        onChange: (function(_this) {
          return function(value) {
            return _this.displacementFactor = value;
          };
        })(this)
      });
      this.$controls.append("<div class='gradient-curve'>\n  <canvas height='256' width='256'></canvas>\n</div>");
      this.gradientCurve = new ColorCurve(this.$controls.find('.gradient-curve canvas')[0]);
      this.wireframeControl = new TopViewer.CheckboxControl(this, {
        $parent: this.$controls,
        name: 'wireframe',
        value: false,
        onChange: (function(_this) {
          return function(value) {
            return _this.scene.update();
          };
        })(this)
      });
    }

    RenderingControls.prototype.onMouseDown = function(position, button) {
      RenderingControls.__super__.onMouseDown.apply(this, arguments);
      return this.gradientCurve.mouseDown(this.transformPositionToPage(position));
    };

    RenderingControls.prototype.onMouseMove = function(position) {
      RenderingControls.__super__.onMouseMove.apply(this, arguments);
      return this.gradientCurve.mouseMove(this.transformPositionToPage(position));
    };

    RenderingControls.prototype.onMouseUp = function(position, button) {
      RenderingControls.__super__.onMouseUp.apply(this, arguments);
      return this.gradientCurve.mouseUp(this.transformPositionToPage(position));
    };

    RenderingControls.prototype.transformPositionToPage = function(position) {
      var offset;
      offset = this.$appWindow.offset();
      return {
        x: position.x + offset.left,
        y: position.y + offset.top
      };
    };

    return RenderingControls;

  })(TopViewer.UIArea);

}).call(this);

//# sourceMappingURL=renderingcontrols.js.map
