// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  TopViewer.Vector = (function() {
    function Vector(options) {
      var fieldGeometry, fieldIndexArray, fieldIndexAttribute, height, i, index, j, k, nodesCount, ref, setVertexIndexCoordinates, vectorCornerIndexArray, vectorCornerIndexAttribute;
      this.options = options;
      height = this.options.model.basePositionsTexture.image.height;
      nodesCount = this.options.model.nodes.length;
      setVertexIndexCoordinates = function(attribute, i, index) {
        attribute.setX(i, index % 4096 / 4096);
        return attribute.setY(i, Math.floor(index / 4096) / height);
      };
      fieldGeometry = new THREE.BufferGeometry();
      this.fieldMesh = new THREE.LineSegments(fieldGeometry, this.options.model.fieldMaterial);
      fieldIndexArray = new Float32Array(nodesCount * 4);
      fieldIndexAttribute = new THREE.BufferAttribute(fieldIndexArray, 2);
      vectorCornerIndexArray = new Float32Array(nodesCount * 2);
      vectorCornerIndexAttribute = new THREE.BufferAttribute(vectorCornerIndexArray, 1);
      for (index = j = 0, ref = nodesCount; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
        for (i = k = 0; k <= 1; i = ++k) {
          setVertexIndexCoordinates(fieldIndexAttribute, index * 2 + i, index);
          vectorCornerIndexArray[index * 2 + i] = i;
        }
      }
      fieldGeometry.addAttribute('vertexIndex', fieldIndexAttribute);
      fieldGeometry.addAttribute("cornerIndex", vectorCornerIndexAttribute);
      fieldGeometry.drawRange.count = nodesCount * 2;
      this._updateGeometry();
      this.options.model.add(this.fieldMesh);
    }

    Vector.prototype._updateGeometry = function() {
      return this._updateBounds(this.fieldMesh, this.options.model);
    };

    Vector.prototype._updateBounds = function(mesh, model) {
      mesh.geometry.boundingBox = this.options.model.boundingBox;
      return mesh.geometry.boundingSphere = this.options.model.boundingSphere;
    };

    Vector.prototype.showFrame = function() {
      return this.fieldMesh.visible = this.options.engine.renderingControls.vectorsFieldVectorControl.value === this.options.vector;
    };

    return Vector;

  })();

}).call(this);

//# sourceMappingURL=vector.js.map
