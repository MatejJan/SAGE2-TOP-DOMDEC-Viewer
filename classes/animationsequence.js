// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TopViewer.AnimationSequence = (function(superClass) {
    extend(AnimationSequence, superClass);

    function AnimationSequence(options) {
      this.options = options;
      AnimationSequence.__super__.constructor.apply(this, arguments);
      this.loaders = {
        ply: new THREE.PLYLoader(this.options.loadingManager),
        hive: new THREE.HiveLoader(this.options.loadingManager)
      };
      this.length = this.options.endFrame - this.options.startFrame + 1;
    }

    AnimationSequence.prototype.load = function() {
      var fn, frameNumber, i, ref, ref1;
      this.options.playbackControls.load();
      fn = (function(_this) {
        return function(frameNumber) {
          var extension, frame, frameIndex, frameName;
          frame = {
            loaded: false,
            loadPercentage: 0,
            normalized: false,
            ready: false
          };
          frameIndex = frameNumber - _this.options.startFrame;
          _this.frames[frameIndex] = frame;
          frameName = "" + frameNumber;
          if (_this.options.frameNumberLength) {
            while (frameName.length < _this.options.frameNumberLength) {
              frameName = "0" + frameName;
            }
          }
          frame.filename = _this.options.filename.replace('#', frameName);
          extension = frame.filename.split('.').pop();
          frame.loader = _this.loaders[extension];
          if (_this.onLoadProgress) {
            return frame.onLoadProgressHandler = function(loadPercentage) {
              return _this.onLoadProgress(frameIndex, loadPercentage);
            };
          }
        };
      })(this);
      for (frameNumber = i = ref = this.options.startFrame, ref1 = this.options.endFrame; ref <= ref1 ? i <= ref1 : i >= ref1; frameNumber = ref <= ref1 ? ++i : --i) {
        fn(frameNumber);
      }
      this._nextFrameToLoad = 0;
      this._concurentFramesLoading = 0;
      return this.processLoadQueue();
    };

    AnimationSequence.prototype.processLoadQueue = function() {
      var frame;
      if (this._nextFrameToLoad == null) {
        return;
      }
      if (!this.options.playbackControls.loading) {
        return;
      }
      if (this._nextFrameToLoad >= this.frames.length) {
        return;
      }
      if (this.maxConcurrentFramesLoading && this._concurentFramesLoading >= this.maxConcurrentFramesLoading) {
        return;
      }
      frame = this.frames[this._nextFrameToLoad];
      frame.loader.load(frame.filename, (function(_this) {
        return function(geometry) {
          var mesh;
          geometry.name = frame.filename;
          mesh = new THREE.Mesh(geometry, _this.options.scene.modelMaterial);
          mesh.matrixAutoUpdate = false;
          mesh.castShadow = true;
          frame.mesh = mesh;
          frame.loaded = true;
          _this.normalizeMeshes();
          _this.updateAnimation();
          _this.options.scene.addFrame(frame);
          _this._concurentFramesLoading--;
          return _this.processLoadQueue();
        };
      })(this), frame.onLoadProgressHandler);
      this._nextFrameToLoad++;
      this._concurentFramesLoading++;
      return this.processLoadQueue();
    };

    return AnimationSequence;

  })(TopViewer.Animation);

}).call(this);

//# sourceMappingURL=animationsequence.js.map
