// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TopViewer.ModelMaterial = (function(superClass) {
    extend(ModelMaterial, superClass);

    function ModelMaterial(model) {
      this.model = model;
      ModelMaterial.__super__.constructor.call(this, {
        uniforms: {
          basePositionsTexture: {
            type: 't',
            value: this.model.basePositionsTexture
          },
          displacementsTexture: {
            type: 't',
            value: this.model.displacementsTexture
          },
          displacementFactor: {
            type: 'f',
            value: 0
          },
          scalarsTexture: {
            type: 't',
            value: this.model.scalarsTexture
          },
          scalarsMin: {
            type: 'f',
            value: 0
          },
          scalarsRange: {
            type: 'f',
            value: 0
          },
          gradientTexture: {
            type: 't',
            value: this.model.options.engine.gradientTexture
          },
          gradientCurveTexture: {
            type: 't',
            value: this.model.options.engine.gradientCurveTexture
          },
          time: {
            type: 'f',
            value: 0
          },
          color: {
            type: 'c',
            value: new THREE.Color('white')
          },
          opacity: {
            type: 'f',
            value: 1
          }
        },
        side: THREE.DoubleSide,
        vertexShader: "precision highp float;\nprecision highp int;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nuniform sampler2D basePositionsTexture;\n\nuniform sampler2D displacementsTexture;\nuniform float displacementFactor;\n\nuniform sampler2D scalarsTexture;\nuniform float scalarsMin;\nuniform float scalarsRange;\n\nuniform float time;\n\nattribute vec2 vertexIndex;\n\nvarying float scalar;\n\nvoid main()	{\n  vec4 positionData = texture2D(basePositionsTexture, vertexIndex);\n  vec3 vertexPosition = positionData.xyz;\n\n  if (displacementFactor > 0.0) {\n    positionData = texture2D(displacementsTexture, vertexIndex);\n    vertexPosition += positionData.xyz * displacementFactor;\n  }\n\n  if (scalarsRange > 0.0) {\n    scalar = clamp((texture2D(scalarsTexture, vertexIndex).a - scalarsMin) / scalarsRange, 0.01, 0.99);\n  } else {\n    scalar = -1.0;\n  }\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(vertexPosition, 1.0);\n}",
        fragmentShader: "precision highp float;\nprecision highp int;\n\nuniform sampler2D gradientCurveTexture;\nuniform sampler2D gradientTexture;\n\nuniform float time;\nuniform vec3 color;\nuniform float opacity;\n\nvarying float scalar;\n\nvoid main()	{\n  if (scalar >= 0.0) {\n    float curvedScalar = texture2D(gradientCurveTexture, vec2(scalar, 0)).a;\n    gl_FragColor = vec4(texture2D(gradientTexture, vec2(curvedScalar, 0)).rgb, opacity);\n  } else {\n    gl_FragColor = vec4(color, opacity);\n  }\n}"
      });
    }

    return ModelMaterial;

  })(THREE.RawShaderMaterial);

}).call(this);

//# sourceMappingURL=modelmaterial.js.map
