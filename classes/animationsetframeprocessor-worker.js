// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  importScripts('../libraries/three.min.js');

  self.onmessage = function(message) {
    var b, buffers, colors, completedElements, frame, g, i, indices, j, k, l, normalizedValue, percentageChangeAt, positions, processEnd, processStart, processTime, r, ref, ref1, ref2, reportProgress, scalar, scalarFrame, totalElements, value, vectorFrame;
    processStart = new Date();
    frame = message.data.frame;
    console.log("Starting to process frame " + frame.time + ".");
    positions = frame.positions;
    indices = frame.indices;
    scalarFrame = frame.scalarFrame;
    vectorFrame = frame.vectorFrame;
    scalar = {
      minValue: frame.scalarMinValue,
      maxValue: frame.scalarMaxValue
    };
    colors = new Float32Array(positions.length);
    totalElements = ((scalarFrame != null ? scalarFrame.scalars.length : void 0) || 0) + ((vectorFrame != null ? vectorFrame.vectors.length : void 0) || 0);
    completedElements = 0;
    percentageChangeAt = Math.floor(totalElements / 100);
    reportProgress = function() {
      completedElements++;
      if (completedElements % percentageChangeAt === 0) {
        return postMessage({
          type: 'progress',
          loadPercentage: 100.0 * completedElements / totalElements
        });
      }
    };
    if (scalarFrame) {
      console.log("Our scalar frame is " + scalarFrame.time + ".");
      for (i = j = 0, ref = scalarFrame.scalars.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        value = scalarFrame.scalars[i];
        normalizedValue = (value - scalar.minValue) / (scalar.maxValue - scalar.minValue);
        r = normalizedValue * 3;
        g = (normalizedValue - 1 / 3) * 3;
        b = (normalizedValue - 2 / 3) * 3;
        colors[i * 3 + 0] = Math.min(1, Math.max(0, r));
        colors[i * 3 + 1] = Math.min(1, Math.max(0, g));
        colors[i * 3 + 2] = Math.min(1, Math.max(0, b));
        reportProgress();
      }
    } else {
      for (i = k = 0, ref1 = colors.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
        colors[i] = 1;
      }
    }
    if (vectorFrame) {
      for (i = l = 0, ref2 = vectorFrame.vectors.length; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
        positions[i] += vectorFrame.vectors[i] * 10;
        reportProgress();
      }
    }
    buffers = {
      positions: positions,
      indices: indices,
      colors: colors
    };
    processEnd = new Date();
    processTime = processEnd - processStart;
    console.log("Processed in " + processTime + "ms");
    postMessage({
      type: 'result',
      buffers: buffers
    });
    return close();
  };

}).call(this);

//# sourceMappingURL=animationsetframeprocessor-worker.js.map
