// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TopViewer.ResultsControl = (function() {
    function ResultsControl(uiArea, options) {
      this.uiArea = uiArea;
      this.options = options;
      this.uiArea[this.constructor.controlsCollectionName].push(this);
      this.$element = $("<div class='results-control " + this.options["class"] + "'></div>");
      this.options.$parent.append(this.$element);
      this.resultsSelectionControl = new TopViewer.DropdownControl(this.uiArea, {
        $parent: this.$element,
        "class": 'results-selector',
        value: null,
        text: this.options.saveState.name || 'None',
        onChange: (function(_this) {
          return function(value) {
            _this.options.saveState.name = _this.resultsSelectionControl.dropdownControl.options.text;
            return _this.value = value;
          };
        })(this)
      });
      this.updateResults();
    }

    ResultsControl.prototype.updateResults = function() {
      var i, len, loadedResults, name, result, resultNames, results;
      this.resultsSelectionControl.reset();
      this.resultsSelectionControl.addValue('None', null);
      loadedResults = this.loadedResults();
      resultNames = _.keys(loadedResults).sort();
      results = [];
      for (i = 0, len = resultNames.length; i < len; i++) {
        name = resultNames[i];
        result = loadedResults[name];
        this.resultsSelectionControl.addValue(name, result.result);
        this.resultsSelectionControl.getValueItem(name).hide();
        if (name === this.resultsSelectionControl.dropdownControl.options.text) {
          results.push(this.resultsSelectionControl.setValue(result.result));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    ResultsControl.prototype.displayResult = function(name, visible) {
      var autoload;
      this.resultsSelectionControl.getValueItem(name).toggle(visible);
      if (visible && this.resultsSelectionControl.options.text === 'None') {
        autoload = this.constructor.autoloadFirst;
        if ((this.options.autoloadNameRegex != null) && name.match(this.options.autoloadNameRegex)) {
          autoload = true;
        }
        if (autoload) {
          return this.resultsSelectionControl.setValue(name);
        }
      }
    };

    return ResultsControl;

  })();

  TopViewer.ScalarControl = (function(superClass) {
    extend(ScalarControl, superClass);

    function ScalarControl() {
      return ScalarControl.__super__.constructor.apply(this, arguments);
    }

    ScalarControl.controlsCollectionName = 'scalarControls';

    ScalarControl.autoloadFirst = true;

    ScalarControl.prototype.loadedResults = function() {
      return this.uiArea.loadedObjects.scalars;
    };

    return ScalarControl;

  })(TopViewer.ResultsControl);

  TopViewer.VectorControl = (function(superClass) {
    extend(VectorControl, superClass);

    function VectorControl() {
      return VectorControl.__super__.constructor.apply(this, arguments);
    }

    VectorControl.controlsCollectionName = 'vectorControls';

    VectorControl.prototype.loadedResults = function() {
      return this.uiArea.loadedObjects.vectors;
    };

    return VectorControl;

  })(TopViewer.ResultsControl);

}).call(this);

//# sourceMappingURL=resultscontrol.js.map
