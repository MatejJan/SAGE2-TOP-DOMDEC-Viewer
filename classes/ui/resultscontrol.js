// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TopViewer.ResultsControl = (function() {
    function ResultsControl(uiArea, options) {
      var i, len, ref, results;
      this.uiArea = uiArea;
      this.options = options;
      this.constructor._resultsControls.push(this);
      this.$element = $("<div class='results-control " + this.options["class"] + "'></div>");
      this.options.$parent.append(this.$element);
      this.resultsSelectionControl = new TopViewer.DropdownControl(this.uiArea, {
        $parent: this.$element,
        "class": 'results-selector',
        value: null,
        text: this.options.saveState.name || 'None',
        onChange: (function(_this) {
          return function(value) {
            _this.options.saveState.name = _this.resultsSelectionControl.dropdownControl.options.text;
            return _this.value = value;
          };
        })(this)
      });
      this.resultsSelectionControl.addValue('None', null);
      ref = this.constructor._addedResults;
      for (i = 0, len = ref.length; i < len; i++) {
        results = ref[i];
        this.resultsSelectionControl.addValue(results.name, results.results);
      }
      if (this.constructor.autoloadFirst && this.constructor._addedResults.length && !this.resultsSelectionControl.dropdownControl.value) {
        this.resultsSelectionControl.setValue(this.constructor._addedResults[0]);
      }
    }

    ResultsControl.addResults = function(name, results) {
      var control, i, len, ref;
      ref = this._resultsControls;
      for (i = 0, len = ref.length; i < len; i++) {
        control = ref[i];
        control.addResults(name, results);
      }
      return this._addedResults.push({
        name: name,
        results: results
      });
    };

    ResultsControl.prototype.addResults = function(name, results) {
      this.resultsSelectionControl.addValue(name, results);
      if (name === this.resultsSelectionControl.dropdownControl.options.text) {
        this.resultsSelectionControl.setValue(results);
      }
      if (this.constructor.autoloadFirst && !this.resultsSelectionControl.dropdownControl.value) {
        return this.resultsSelectionControl.setValue(results);
      }
    };

    return ResultsControl;

  })();

  TopViewer.ScalarControl = (function(superClass) {
    extend(ScalarControl, superClass);

    function ScalarControl() {
      return ScalarControl.__super__.constructor.apply(this, arguments);
    }

    ScalarControl._resultsControls = [];

    ScalarControl._addedResults = [];

    ScalarControl.autoloadFirst = true;

    return ScalarControl;

  })(TopViewer.ResultsControl);

  TopViewer.VectorControl = (function(superClass) {
    extend(VectorControl, superClass);

    function VectorControl() {
      return VectorControl.__super__.constructor.apply(this, arguments);
    }

    VectorControl._resultsControls = [];

    VectorControl._addedResults = [];

    return VectorControl;

  })(TopViewer.ResultsControl);

}).call(this);

//# sourceMappingURL=resultscontrol.js.map
